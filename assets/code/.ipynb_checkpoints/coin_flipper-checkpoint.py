{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\corks\\\\Dropbox\\\\git\\\\website\\\\nikomc.github.io\\\\assets\\\\code\\\\bayesian_coin_flipper.html'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "The Bayesian Coin-Flipper\n",
    "--------------------------------------------------------------------------------\n",
    "\n",
    "Author: Griffin Chure \n",
    "Last Modified: September 23, 2019\n",
    "License: MIT\n",
    "\n",
    "Description\n",
    "--------------------------------------------------------------------------------\n",
    "This Python script generates an interactive tool that illustrates the principle\n",
    "of using Bayes' theorem to estimate the bias of a coin. \n",
    "\"\"\"\n",
    "import numpy as np\n",
    "import bokeh.io\n",
    "import bokeh.plotting\n",
    "from bokeh.models import *\n",
    "import bokeh.layouts\n",
    "colors = {'black':'#444147', 'purple': '#7E59A2', 'orange':'#E39943', \n",
    "                'light_purple':'#A17DB8', 'light_orange':'#EEBA7F'}\n",
    "bokeh.io.output_file('bayesian_coin_flipper.html')\n",
    "\n",
    "\n",
    "# Define sliders. \n",
    "initialize = Button(label='Click to generate new coinflips')\n",
    "coin_flips = Slider(title='Display first log\\u2081\\u2080 coin flips', \n",
    "                    start=0, end=6, step=0.001, value=1, \n",
    "                    bar_color=colors['light_purple'])\n",
    "coin_bias = Slider(title='Coin bias', start=0.001, end=1, step=0.001, value=0.5,\n",
    "                    bar_color=colors['black'])\n",
    "prior_alpha = Slider(title='Prior α', start=0.1, end=30, step=0.01, value=0.5,\n",
    "                    bar_color=colors['light_orange'])\n",
    "prior_beta = Slider(title='Prior β', start=0.1, end=30, step=0.01, value=0.5,\n",
    "                    bar_color=colors['light_orange'])\n",
    "\n",
    "# Set up a plot showing the bias and calculated bias as the number of flips\n",
    "post_ax = bokeh.plotting.figure(width=550, height=300, \n",
    "                            y_axis_label='\\u221d probability', \n",
    "                            x_axis_label='coin bias',\n",
    "                            x_range=[0, 1], y_range=[0, 1.05])\n",
    "\n",
    "# Format the y axis ticks. \n",
    "post_ax.ygrid.visible = False\n",
    "post_ax.yaxis.ticker = [-10, 10]\n",
    "post_ax.title.text_font_style = 'italic'\n",
    "post_ax.title.background_fill_alpha = 0\n",
    "post_ax.title.align = 'left'\n",
    "post_ax.title.text = \"Click button to initialize flips\"\n",
    "\n",
    "\n",
    "# Define a data source for showing the posterior and prior\n",
    "n_points = 500\n",
    "post_source = ColumnDataSource({'probability': np.linspace(0.001, 0.999, n_points), \n",
    "                                'posterior': np.zeros(n_points), \n",
    "                                'prior':np.zeros(n_points)})\n",
    "# Define a source to display the true coin bias\n",
    "bias_source = ColumnDataSource({'bias':[0.5]})\n",
    "flip_source = ColumnDataSource({'flips':[]})\n",
    "\n",
    "\n",
    "# Define the js for changing the coin bias\n",
    "bias_js = CustomJS(args={'bias_source':bias_source, 'coin_bias':coin_bias},\n",
    "                    code=\"\"\"\n",
    "                    bias_source.data['bias'] = [coin_bias.value]; \n",
    "                    bias_source.change.emit();\"\"\") \n",
    "\n",
    "# Define JS code to view a subset of the coin flips and compute the number of \n",
    "# heads\n",
    "viewer_cb = \"\"\"\n",
    "    // Filters the output of flipper based on the number of flips to observe. \n",
    "    var n_displayed = Math.floor(Math.pow(10, flip_viewer.value));\n",
    "\n",
    "    // compute the number of heads in the newly sliced array\n",
    "    var displayed_flips = flip_source.data['flips'].slice(0, n_displayed);\n",
    "    var n_flips = n_displayed;\n",
    "    var n_heads = displayed_flips.reduce((v1, v2) => v1 + v2);\n",
    "    \n",
    "    // Update the title to reflect the number of displayed coin flips.\n",
    "    title.text = \"Displaying \" + n_displayed + \" coin flips\"\n",
    "\"\"\"\n",
    "\n",
    "# Define JS code to generate one million coin flips with the provided bias.\n",
    "flipper_cb = \"\"\"\n",
    "// Generate the coinflips based on the entered values   \n",
    "var bias = coin_bias.value;\n",
    "\n",
    "// *Always* compute 1E6 flips\n",
    "var flips = new Array(1000000).fill().map(() => Math.random() < bias);\n",
    "flip_source.data['flips'] = flips;\n",
    "flip_source.change.emit();\n",
    "\"\"\"\n",
    "\n",
    "# Define the JS code to perform the inference. Note that factorials are \n",
    "# approximated by using a gamma function.\n",
    "inference_cb = \"\"\"\n",
    "// Define a gamma function using the Lanczos approximation\n",
    "// See https://github.com/substack/gamma.js for node module\n",
    " var g_ln = 607/128;\n",
    " var p_ln = [0.99999999999999709182,57.156235665862923517,-59.597960355475491248,\n",
    "            14.136097974741747174,-0.49191381609762019978,0.33994649984811888699e-4,\n",
    "            0.46523628927048575665e-4,-0.98374475304879564677e-4,0.15808870322491248884e-3,\n",
    "            -0.21026444172410488319e-3,0.21743961811521264320e-3,-0.16431810653676389022e-3,\n",
    "            0.84418223983852743293e-4, -0.26190838401581408670e-4,0.36899182659531622704e-5];\n",
    " // Spouge approximation (suitable for large arguments)\n",
    "function lngamma(z) {  \n",
    "      if (z < 0) {return Number('0/0')};\n",
    "      var x = p_ln[0];\n",
    "      for(var i = p_ln.length - 1; i > 0; --i) { \n",
    "            x += p_ln[i] / (z + i)\n",
    "        };\n",
    "      var t = z + g_ln + 0.5;\n",
    "      return .5*Math.log(2*Math.PI)+(z+.5)*Math.log(t)-t+Math.log(x)-Math.log(z);\n",
    "  }\n",
    "\n",
    "function logbeta(a, b, x) {\n",
    "    var numer = (a - 1) * Math.log(x) + (b - 1) * Math.log(1 - x);\n",
    "    var norm_const = lngamma(a) + lngamma(b) - lngamma(a + b);\n",
    "    return numer - norm_const;\n",
    "}\n",
    "\n",
    "// Define the log likelihood\n",
    "function logLike(n, N, p) {\n",
    "    var binomCoeff = lngamma(N + 1) - lngamma(n + 1) - lngamma(N - n + 1)\n",
    "    var prob = n * Math.log(p) +  (N - n) * Math.log(1 - p)\n",
    "    return binomCoeff + prob;\n",
    "}\n",
    "\n",
    "function logSumExp(vals) {\n",
    "    var maxVal = Math.max.apply(null, vals);\n",
    "    var sum_value = 0\n",
    "    for (var i = 0; i < vals.length; i++) {\n",
    "        sum_value += Math.exp(vals[i] - maxVal);\n",
    "    } \n",
    "   return maxVal + Math.log(sum_value);\n",
    "}\n",
    "\n",
    "// Evaluate the posterior\n",
    "var log_posterior = [];\n",
    "var prior = []\n",
    "for (var i = 0; i < post_source.data['probability'].length; i++) {\n",
    "    var prob = post_source.data['probability'][i]\n",
    "    var log_likelihood = logLike(n_heads, n_flips, prob);\n",
    "\n",
    "    log_prior = logbeta(prior_alpha.value, prior_beta.value, prob);\n",
    "    log_posterior[i] = log_likelihood + log_prior;\n",
    "    prior[i] = Math.exp(log_prior);\n",
    "}\n",
    "\n",
    "// Use the logsumexp trick to normalize the posterior\n",
    "var summed = logSumExp(log_posterior);\n",
    "var posterior= []\n",
    "for (var i = 0 ; i < log_posterior.length; i++) { \n",
    "   posterior[i] = Math.exp(log_posterior[i] - summed);\n",
    "}\n",
    "\n",
    "// Rescale everything to be on the same meaningless scale ([0, 1]).\n",
    "var maxPrior = Math.max(...prior)\n",
    "var maxPosterior = Math.max(...posterior)\n",
    "var priorNorm = []\n",
    "var posteriorNorm = []\n",
    "for (var i = 0; i < post_source.data['probability'].length; i++) {\n",
    "    priorNorm[i] = prior[i] / maxPrior;\n",
    "    posteriorNorm[i] = posterior[i] / maxPosterior;\n",
    "}\n",
    "\n",
    "// Update the source data.\n",
    "post_source.data['posterior'] = posteriorNorm;\n",
    "post_source.data['prior'] = priorNorm;\n",
    "post_source.change.emit();\n",
    "\"\"\"\n",
    "\n",
    "# Define the callbacks\n",
    "args = {'coin_bias':coin_bias, \n",
    "        'prior_alpha':prior_alpha, \n",
    "        'prior_beta':prior_beta, \n",
    "        'flip_viewer':coin_flips,\n",
    "        'post_source':post_source,\n",
    "        'flip_source':flip_source,\n",
    "        'title': post_ax.title}\n",
    "flipper = CustomJS(args=args, code=flipper_cb + viewer_cb + inference_cb) \n",
    "viewer = CustomJS(args=args, code=viewer_cb + inference_cb)\n",
    "\n",
    "# Assign the callbacks to the inputs\n",
    "initialize.js_on_click(flipper)\n",
    "coin_bias.js_on_change('value', bias_js)\n",
    "coin_flips.js_on_change('value', viewer)\n",
    "prior_beta.js_on_change('value', viewer)\n",
    "prior_alpha.js_on_change('value', viewer)\n",
    "\n",
    "\n",
    "# Define the plot layout\n",
    "box1 = WidgetBox(coin_flips, coin_bias)\n",
    "box2 = WidgetBox(prior_alpha, prior_beta)\n",
    "row1 = bokeh.layouts.row(box1, box2)\n",
    "lay = bokeh.layouts.column(initialize, row1, post_ax)\n",
    "\n",
    "\n",
    "# Populate the axes\n",
    "post_ax.line(x='probability', y='posterior', source=post_source,\n",
    "            color=colors['purple'], line_width=2, legend_label='posterior probability')\n",
    "post_ax.line(x='probability', y='prior', source=post_source, \n",
    "            color=colors['orange'], line_width=2, legend_label='prior probability')\n",
    "post_ax.ray(x='bias', y=0, source=bias_source, \n",
    "            length=0, angle=np.pi/2, line_width=2, color=colors['black'],\n",
    "            legend_label='true coin bias')\n",
    "\n",
    "# Set the theme details\n",
    "theme_json =  {\n",
    "    'attrs' : {\n",
    "        'Figure' : {\n",
    "            'background_fill_color': '#EEEEEE',\n",
    "        },\n",
    "        'Axis': {\n",
    "            'axis_line_color': 'slategray',\n",
    "            'major_tick_line_color': None,\n",
    "            'minor_tick_line_color': None,\n",
    "        },\n",
    "        'Legend': {\n",
    "            'border_line_color': 'slategray',\n",
    "            'background_fill_color': '#EEEEEE',\n",
    "            'border_line_width': 0.75,\n",
    "            'background_fill_alpha': 0.75,\n",
    "        },\n",
    "        'Grid': {\n",
    "            'grid_line_color': '#FFFFFF',\n",
    "            'grid_line_width': 0.75,\n",
    "        },\n",
    "        'Text': {\n",
    "            'text_font_style': 'italic',\n",
    "            'text_font': 'Arial', \n",
    "            'text_font_size':10,\n",
    "        },\n",
    "        'Title': {\n",
    "            'text_color': '#3c3c3c',\n",
    "            'text_font': 'Arial',\n",
    "            'offset': 2,\n",
    "         }\n",
    "    }\n",
    "}\n",
    "\n",
    "        \n",
    "theme = bokeh.themes.Theme(json=theme_json)\n",
    "bokeh.io.curdoc().theme = theme\n",
    "bokeh.io.save(lay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
